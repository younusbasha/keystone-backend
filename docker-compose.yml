version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: keystone_postgres
    environment:
      POSTGRES_DB: techsophy_keystone
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: keystone_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: keystone_api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/techsophy_keystone
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - DEBUG=true
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app:ro
      - ./.env:/app/.env:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Migration (run once)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: keystone_migrate
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/techsophy_keystone
    depends_on:
      postgres:
        condition: service_healthy
    command: ["python", "-c", "
      import asyncio;
      from app.config.database import create_tables;
      asyncio.run(create_tables())
    "]
    profiles:
      - migration

volumes:
  postgres_data:

networks:
  default:
    name: keystone_network
